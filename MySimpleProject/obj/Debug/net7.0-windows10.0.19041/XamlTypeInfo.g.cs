//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MySimpleProject.MySimpleProject_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[38];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Uno.Toolkit.UI.Material.MaterialToolkitTheme";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Uno.Toolkit.UI.NavigationBar";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[8] = "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>";
            _typeNameTable[9] = "Microsoft.UI.Xaml.Controls.ICommandBarElement";
            _typeNameTable[10] = "Uno.Toolkit.UI.NavigationBarClosedDisplayMode";
            _typeNameTable[11] = "System.Enum";
            _typeNameTable[12] = "System.ValueType";
            _typeNameTable[13] = "Microsoft.UI.Xaml.Controls.LightDismissOverlayMode";
            _typeNameTable[14] = "Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility";
            _typeNameTable[15] = "Uno.Toolkit.UI.NavigationBarDefaultLabelPosition";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Controls.AppBarButton";
            _typeNameTable[17] = "Uno.Toolkit.UI.MainCommandMode";
            _typeNameTable[18] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[19] = "MySimpleProject.Presentation.MainPage";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[21] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[22] = "MySimpleProject.Presentation.SecondPage";
            _typeNameTable[23] = "Uno.Toolkit.UI.ExtendedSplashScreen";
            _typeNameTable[24] = "Uno.Toolkit.UI.LoadingView";
            _typeNameTable[25] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[26] = "Windows.ApplicationModel.Activation.SplashScreen";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[28] = "Uno.Toolkit.ILoadable";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Controls.ProgressRing";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[32] = "Double";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
            _typeNameTable[34] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[35] = "MySimpleProject.Presentation.Shell";
            _typeNameTable[36] = "Windows.UI.Color";
            _typeNameTable[37] = "Byte";

            _typeTable = new global::System.Type[38];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Uno.Toolkit.UI.Material.MaterialToolkitTheme);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Uno.Toolkit.UI.NavigationBar);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[8] = typeof(global::Windows.Foundation.Collections.IObservableVector<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>);
            _typeTable[9] = typeof(global::Microsoft.UI.Xaml.Controls.ICommandBarElement);
            _typeTable[10] = typeof(global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode);
            _typeTable[11] = typeof(global::System.Enum);
            _typeTable[12] = typeof(global::System.ValueType);
            _typeTable[13] = typeof(global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode);
            _typeTable[14] = typeof(global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility);
            _typeTable[15] = typeof(global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Controls.AppBarButton);
            _typeTable[17] = typeof(global::Uno.Toolkit.UI.MainCommandMode);
            _typeTable[18] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[19] = typeof(global::MySimpleProject.Presentation.MainPage);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[22] = typeof(global::MySimpleProject.Presentation.SecondPage);
            _typeTable[23] = typeof(global::Uno.Toolkit.UI.ExtendedSplashScreen);
            _typeTable[24] = typeof(global::Uno.Toolkit.UI.LoadingView);
            _typeTable[25] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[26] = typeof(global::Windows.ApplicationModel.Activation.SplashScreen);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[28] = typeof(global::Uno.Toolkit.ILoadable);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRing);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[32] = typeof(global::System.Double);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings);
            _typeTable[34] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[35] = typeof(global::MySimpleProject.Presentation.Shell);
            _typeTable[36] = typeof(global::Windows.UI.Color);
            _typeTable[37] = typeof(global::System.Byte);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_MaterialToolkitTheme() { return new global::Uno.Toolkit.UI.Material.MaterialToolkitTheme(); }
        private object Activate_6_NavigationBar() { return new global::Uno.Toolkit.UI.NavigationBar(); }
        private object Activate_19_MainPage() { return new global::MySimpleProject.Presentation.MainPage(); }
        private object Activate_22_SecondPage() { return new global::MySimpleProject.Presentation.SecondPage(); }
        private object Activate_23_ExtendedSplashScreen() { return new global::Uno.Toolkit.UI.ExtendedSplashScreen(); }
        private object Activate_24_LoadingView() { return new global::Uno.Toolkit.UI.LoadingView(); }
        private object Activate_30_ProgressRing() { return new global::Microsoft.UI.Xaml.Controls.ProgressRing(); }
        private object Activate_35_Shell() { return new global::MySimpleProject.Presentation.Shell(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_4_MaterialToolkitTheme(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_8_IObservableVector(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.ICommandBarElement)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Uno.Toolkit.UI.Material.MaterialToolkitTheme
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_4_MaterialToolkitTheme;
                userType.DictionaryAdd = MapAdd_4_MaterialToolkitTheme;
                userType.AddMemberName("ColorOverrideSource");
                userType.AddMemberName("FontOverrideSource");
                userType.AddMemberName("FontOverrideDictionary");
                userType.AddMemberName("ColorOverrideDictionary");
                xamlType = userType;
                break;

            case 5:   //  String
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Uno.Toolkit.UI.NavigationBar
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_6_NavigationBar;
                userType.SetContentPropertyName("Uno.Toolkit.UI.NavigationBar.PrimaryCommands");
                userType.AddMemberName("PrimaryCommands");
                userType.AddMemberName("IsSticky");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ClosedDisplayMode");
                userType.AddMemberName("LightDismissOverlayMode");
                userType.AddMemberName("SecondaryCommands");
                userType.AddMemberName("OverflowButtonVisibility");
                userType.AddMemberName("IsDynamicOverflowEnabled");
                userType.AddMemberName("DefaultLabelPosition");
                userType.AddMemberName("MainCommand");
                userType.AddMemberName("MainCommandMode");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("MainCommandStyle");
                xamlType = userType;
                break;

            case 7:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_8_IObservableVector;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  Microsoft.UI.Xaml.Controls.ICommandBarElement
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Uno.Toolkit.UI.NavigationBarClosedDisplayMode
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Compact", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Compact);
                userType.AddEnumValue("Minimal", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Minimal);
                userType.AddEnumValue("Hidden", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Hidden);
                xamlType = userType;
                break;

            case 11:   //  System.Enum
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 12:   //  System.ValueType
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 13:   //  Microsoft.UI.Xaml.Controls.LightDismissOverlayMode
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Auto);
                userType.AddEnumValue("Visible", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Collapsed);
                xamlType = userType;
                break;

            case 15:   //  Uno.Toolkit.UI.NavigationBarDefaultLabelPosition
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Bottom);
                userType.AddEnumValue("Right", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Right);
                userType.AddEnumValue("Collapsed", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Collapsed);
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Controls.AppBarButton
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Uno.Toolkit.UI.MainCommandMode
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Back", global::Uno.Toolkit.UI.MainCommandMode.Back);
                userType.AddEnumValue("Action", global::Uno.Toolkit.UI.MainCommandMode.Action);
                xamlType = userType;
                break;

            case 18:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  MySimpleProject.Presentation.MainPage
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  MySimpleProject.Presentation.SecondPage
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_SecondPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Uno.Toolkit.UI.ExtendedSplashScreen
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Uno.Toolkit.UI.LoadingView"));
                userType.Activator = Activate_23_ExtendedSplashScreen;
                userType.AddMemberName("SplashScreen");
                userType.AddMemberName("Window");
                userType.AddMemberName("SplashScreenContent");
                xamlType = userType;
                break;

            case 24:   //  Uno.Toolkit.UI.LoadingView
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_24_LoadingView;
                userType.AddMemberName("LoadingContentTemplate");
                userType.AddMemberName("Source");
                userType.AddMemberName("LoadingContent");
                userType.AddMemberName("LoadingContentTemplateSelector");
                xamlType = userType;
                break;

            case 25:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Windows.ApplicationModel.Activation.SplashScreen
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Uno.Toolkit.ILoadable
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Microsoft.UI.Xaml.Controls.ProgressRing
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_30_ProgressRing;
                userType.AddMemberName("IsActive");
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Double
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  MySimpleProject.Presentation.Shell
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_Shell;
                userType.AddMemberName("ContentControl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Windows.UI.Color
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("R");
                userType.AddMemberName("G");
                userType.AddMemberName("B");
                xamlType = userType;
                break;

            case 37:   //  Byte
                userType = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Extensions.Navigation.Toolkit.WinUI.Uno_Extensions_Navigation_Toolkit_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Extensions.Navigation.WinUI.Uno_Extensions_Navigation_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Material.Uno_Material_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Toolkit.UI.Uno_Toolkit_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Toolkit.UI.Material.Uno_Toolkit_WinUI_Material_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.UI.Toolkit.Uno_UI_Toolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_MaterialToolkitTheme_ColorOverrideSource(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.ColorOverrideSource;
        }
        private void set_1_MaterialToolkitTheme_ColorOverrideSource(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.ColorOverrideSource = (global::System.String)Value;
        }
        private object get_2_MaterialToolkitTheme_FontOverrideSource(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.FontOverrideSource;
        }
        private void set_2_MaterialToolkitTheme_FontOverrideSource(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.FontOverrideSource = (global::System.String)Value;
        }
        private object get_3_MaterialToolkitTheme_FontOverrideDictionary(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.FontOverrideDictionary;
        }
        private void set_3_MaterialToolkitTheme_FontOverrideDictionary(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.FontOverrideDictionary = (global::Microsoft.UI.Xaml.ResourceDictionary)Value;
        }
        private object get_4_MaterialToolkitTheme_ColorOverrideDictionary(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.ColorOverrideDictionary;
        }
        private void set_4_MaterialToolkitTheme_ColorOverrideDictionary(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.ColorOverrideDictionary = (global::Microsoft.UI.Xaml.ResourceDictionary)Value;
        }
        private object get_5_NavigationBar_PrimaryCommands(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.PrimaryCommands;
        }
        private object get_6_NavigationBar_IsSticky(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsSticky;
        }
        private void set_6_NavigationBar_IsSticky(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsSticky = (global::System.Boolean)Value;
        }
        private object get_7_NavigationBar_IsOpen(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsOpen;
        }
        private void set_7_NavigationBar_IsOpen(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_8_NavigationBar_ClosedDisplayMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.ClosedDisplayMode;
        }
        private void set_8_NavigationBar_ClosedDisplayMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.ClosedDisplayMode = (global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode)Value;
        }
        private object get_9_NavigationBar_LightDismissOverlayMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.LightDismissOverlayMode;
        }
        private void set_9_NavigationBar_LightDismissOverlayMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.LightDismissOverlayMode = (global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode)Value;
        }
        private object get_10_NavigationBar_SecondaryCommands(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.SecondaryCommands;
        }
        private object get_11_NavigationBar_OverflowButtonVisibility(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.OverflowButtonVisibility;
        }
        private void set_11_NavigationBar_OverflowButtonVisibility(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.OverflowButtonVisibility = (global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility)Value;
        }
        private object get_12_NavigationBar_IsDynamicOverflowEnabled(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsDynamicOverflowEnabled;
        }
        private void set_12_NavigationBar_IsDynamicOverflowEnabled(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsDynamicOverflowEnabled = (global::System.Boolean)Value;
        }
        private object get_13_NavigationBar_DefaultLabelPosition(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.DefaultLabelPosition;
        }
        private void set_13_NavigationBar_DefaultLabelPosition(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.DefaultLabelPosition = (global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition)Value;
        }
        private object get_14_NavigationBar_MainCommand(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommand;
        }
        private void set_14_NavigationBar_MainCommand(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommand = (global::Microsoft.UI.Xaml.Controls.AppBarButton)Value;
        }
        private object get_15_NavigationBar_MainCommandMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommandMode;
        }
        private void set_15_NavigationBar_MainCommandMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommandMode = (global::Uno.Toolkit.UI.MainCommandMode)Value;
        }
        private object get_16_NavigationBar_Subtitle(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.Subtitle;
        }
        private void set_16_NavigationBar_Subtitle(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_17_NavigationBar_MainCommandStyle(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommandStyle;
        }
        private void set_17_NavigationBar_MainCommandStyle(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommandStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_18_LoadingView_LoadingContentTemplate(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContentTemplate;
        }
        private void set_18_LoadingView_LoadingContentTemplate(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_19_ExtendedSplashScreen_SplashScreen(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.SplashScreen;
        }
        private void set_19_ExtendedSplashScreen_SplashScreen(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.SplashScreen = (global::Windows.ApplicationModel.Activation.SplashScreen)Value;
        }
        private object get_20_ExtendedSplashScreen_Window(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.Window;
        }
        private void set_20_ExtendedSplashScreen_Window(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.Window = (global::Microsoft.UI.Xaml.Window)Value;
        }
        private object get_21_ExtendedSplashScreen_SplashScreenContent(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.SplashScreenContent;
        }
        private void set_21_ExtendedSplashScreen_SplashScreenContent(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.SplashScreenContent = (global::System.Object)Value;
        }
        private object get_22_LoadingView_Source(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.Source;
        }
        private void set_22_LoadingView_Source(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.Source = (global::Uno.Toolkit.ILoadable)Value;
        }
        private object get_23_LoadingView_LoadingContent(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContent;
        }
        private void set_23_LoadingView_LoadingContent(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContent = (global::System.Object)Value;
        }
        private object get_24_LoadingView_LoadingContentTemplateSelector(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContentTemplateSelector;
        }
        private void set_24_LoadingView_LoadingContentTemplateSelector(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContentTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_25_ProgressRing_IsActive(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsActive;
        }
        private void set_25_ProgressRing_IsActive(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_26_ProgressRing_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsIndeterminate;
        }
        private void set_26_ProgressRing_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_27_ProgressRing_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Maximum;
        }
        private void set_27_ProgressRing_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_28_ProgressRing_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Minimum;
        }
        private void set_28_ProgressRing_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_29_ProgressRing_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.TemplateSettings;
        }
        private object get_30_ProgressRing_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Value;
        }
        private void set_30_ProgressRing_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_31_Shell_ContentControl(object instance)
        {
            var that = (global::MySimpleProject.Presentation.Shell)instance;
            return that.ContentControl;
        }
        private object get_32_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_32_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_33_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_33_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_34_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_34_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_35_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_35_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember xamlMember = null;
            global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.ColorOverrideSource":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "ColorOverrideSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MaterialToolkitTheme_ColorOverrideSource;
                xamlMember.Setter = set_1_MaterialToolkitTheme_ColorOverrideSource;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.FontOverrideSource":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "FontOverrideSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MaterialToolkitTheme_FontOverrideSource;
                xamlMember.Setter = set_2_MaterialToolkitTheme_FontOverrideSource;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.FontOverrideDictionary":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "FontOverrideDictionary", "Microsoft.UI.Xaml.ResourceDictionary");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_MaterialToolkitTheme_FontOverrideDictionary;
                xamlMember.Setter = set_3_MaterialToolkitTheme_FontOverrideDictionary;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.ColorOverrideDictionary":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "ColorOverrideDictionary", "Microsoft.UI.Xaml.ResourceDictionary");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_MaterialToolkitTheme_ColorOverrideDictionary;
                xamlMember.Setter = set_4_MaterialToolkitTheme_ColorOverrideDictionary;
                break;
            case "Uno.Toolkit.UI.NavigationBar.PrimaryCommands":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "PrimaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_NavigationBar_PrimaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsSticky":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "IsSticky", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_NavigationBar_IsSticky;
                xamlMember.Setter = set_6_NavigationBar_IsSticky;
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsOpen":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_NavigationBar_IsOpen;
                xamlMember.Setter = set_7_NavigationBar_IsOpen;
                break;
            case "Uno.Toolkit.UI.NavigationBar.ClosedDisplayMode":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "ClosedDisplayMode", "Uno.Toolkit.UI.NavigationBarClosedDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_NavigationBar_ClosedDisplayMode;
                xamlMember.Setter = set_8_NavigationBar_ClosedDisplayMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.LightDismissOverlayMode":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "LightDismissOverlayMode", "Microsoft.UI.Xaml.Controls.LightDismissOverlayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_NavigationBar_LightDismissOverlayMode;
                xamlMember.Setter = set_9_NavigationBar_LightDismissOverlayMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.SecondaryCommands":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "SecondaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_NavigationBar_SecondaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Uno.Toolkit.UI.NavigationBar.OverflowButtonVisibility":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "OverflowButtonVisibility", "Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_NavigationBar_OverflowButtonVisibility;
                xamlMember.Setter = set_11_NavigationBar_OverflowButtonVisibility;
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsDynamicOverflowEnabled":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "IsDynamicOverflowEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_NavigationBar_IsDynamicOverflowEnabled;
                xamlMember.Setter = set_12_NavigationBar_IsDynamicOverflowEnabled;
                break;
            case "Uno.Toolkit.UI.NavigationBar.DefaultLabelPosition":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "DefaultLabelPosition", "Uno.Toolkit.UI.NavigationBarDefaultLabelPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_NavigationBar_DefaultLabelPosition;
                xamlMember.Setter = set_13_NavigationBar_DefaultLabelPosition;
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommand":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "MainCommand", "Microsoft.UI.Xaml.Controls.AppBarButton");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_NavigationBar_MainCommand;
                xamlMember.Setter = set_14_NavigationBar_MainCommand;
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommandMode":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "MainCommandMode", "Uno.Toolkit.UI.MainCommandMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_NavigationBar_MainCommandMode;
                xamlMember.Setter = set_15_NavigationBar_MainCommandMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.Subtitle":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_NavigationBar_Subtitle;
                xamlMember.Setter = set_16_NavigationBar_Subtitle;
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommandStyle":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "MainCommandStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_NavigationBar_MainCommandStyle;
                xamlMember.Setter = set_17_NavigationBar_MainCommandStyle;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContentTemplate":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "LoadingContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_LoadingView_LoadingContentTemplate;
                xamlMember.Setter = set_18_LoadingView_LoadingContentTemplate;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.SplashScreen":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "SplashScreen", "Windows.ApplicationModel.Activation.SplashScreen");
                xamlMember.Getter = get_19_ExtendedSplashScreen_SplashScreen;
                xamlMember.Setter = set_19_ExtendedSplashScreen_SplashScreen;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.Window":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Window", "Microsoft.UI.Xaml.Window");
                xamlMember.Getter = get_20_ExtendedSplashScreen_Window;
                xamlMember.Setter = set_20_ExtendedSplashScreen_Window;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.SplashScreenContent":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "SplashScreenContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ExtendedSplashScreen_SplashScreenContent;
                xamlMember.Setter = set_21_ExtendedSplashScreen_SplashScreenContent;
                break;
            case "Uno.Toolkit.UI.LoadingView.Source":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Source", "Uno.Toolkit.ILoadable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_LoadingView_Source;
                xamlMember.Setter = set_22_LoadingView_Source;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContent":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "LoadingContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_LoadingView_LoadingContent;
                xamlMember.Setter = set_23_LoadingView_LoadingContent;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContentTemplateSelector":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "LoadingContentTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_LoadingView_LoadingContentTemplateSelector;
                xamlMember.Setter = set_24_LoadingView_LoadingContentTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsActive":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ProgressRing_IsActive;
                xamlMember.Setter = set_25_ProgressRing_IsActive;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsIndeterminate":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ProgressRing_IsIndeterminate;
                xamlMember.Setter = set_26_ProgressRing_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Maximum":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_ProgressRing_Maximum;
                xamlMember.Setter = set_27_ProgressRing_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Minimum":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ProgressRing_Minimum;
                xamlMember.Setter = set_28_ProgressRing_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.TemplateSettings":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings");
                xamlMember.Getter = get_29_ProgressRing_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Value":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_ProgressRing_Value;
                xamlMember.Setter = set_30_ProgressRing_Value;
                break;
            case "MySimpleProject.Presentation.Shell.ContentControl":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MySimpleProject.Presentation.Shell");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "ContentControl", "Microsoft.UI.Xaml.Controls.ContentControl");
                xamlMember.Getter = get_31_Shell_ContentControl;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_32_Color_A;
                xamlMember.Setter = set_32_Color_A;
                break;
            case "Windows.UI.Color.R":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_33_Color_R;
                xamlMember.Setter = set_33_Color_R;
                break;
            case "Windows.UI.Color.G":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_34_Color_G;
                xamlMember.Setter = set_34_Color_G;
                break;
            case "Windows.UI.Color.B":
                userType = (global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_35_Color_B;
                xamlMember.Setter = set_35_Color_B;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MySimpleProject.MySimpleProject_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

